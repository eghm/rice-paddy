	/**
	 * Expose the database connection
	 *
	 * @return a Connection to interact with the configured Database.
	 * @throws org.kuali.student.r2.common.exceptions.OperationFailedException
	 */
	@Override
	public java.sql.Connection getJDBCConnection()
			throws OperationFailedException {
		Properties localProps = ServerConfig.getServerProperties();
		// pass dbProps to getConnection()
		Properties dbProps = new Properties();
		dbProps.setProperty("user", localProps.getProperty("jdbc.user"));
		dbProps.setProperty("password", localProps.getProperty("jdbc.password"));
		String dbURL = localProps.getProperty("jdbc.url");

		try {
			// Load the Connector/J driver
			Class.forName(localProps.getProperty("jdbc.driver"));
			Connection conn = DriverManager.getConnection(dbURL, dbProps);
			return conn;
		} catch (ClassNotFoundException e) {
			throw new OperationFailedException("unable to load jdbc driver", e);
		} catch (SQLException e) {
			System.err.println("jdbc.user=" + dbProps.getProperty("user"));
			System.err.println ("dbURL=" + dbURL);
			System.err.println ("SQLException.message=" + e.getMessage());
			System.err.println ("SQLException.sqlState=" + e.getSQLState());
			System.err.println(e.getStackTrace());
			throw new OperationFailedException("unable to get db connection" + e.getMessage(), e);
		}
	}

	/**
	* Properly close database resources.  Resources can be null or already closed.
	*
	* @param rs ResultSet to close
	* @param ps PreparedStatement to close
	* @param conn Connection to close
	* @param ex any exception which occured prior to closing resources may be null if none.
	* @throws OperationFailedException exception while closing resource
	*/
	protected void close(ResultSet rs, Statement ps, Connection conn, Exception ex) throws OperationFailedException {
		OperationFailedException opEx = new OperationFailedException("Exceptions closing DB resources.");
		boolean exception = false;
		if (rs != null) {
			try {
				if (!rs.isClosed()) {
					rs.close();
				}
			} catch(SQLException e) {
				exception = true;
				opEx.addSuppressed(e);
			}
		}
		if (ps != null) {
			try {
				if (!ps.isClosed()) {
					ps.close();
				}
			} catch (SQLException e) {
				exception = true;
				opEx.addSuppressed(e);
			}
		}
		if (conn != null) {
			try {
				if (!conn.isClosed()) {
					conn.close();
				}
			} catch (SQLException e) {
				exception = true;
				opEx.addSuppressed(e);
			}
		}

		if (exception && ex != null) {
			opEx.initCause(ex);
		}
		if (exception) {
			throw opEx;
		}
	}

